// Mocks generated by Mockito 5.4.2 from annotations
// in bedtime_stories/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:ui' as _i4;

import 'package:bedtime_stories/services/app_preferences_service.dart' as _i12;
import 'package:bedtime_stories/services/app_theme_service.dart' as _i13;
import 'package:flutter/material.dart' as _i5;
import 'package:hive_flutter/hive_flutter.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:stacked/stacked.dart' as _i2;
import 'package:stacked_services/src/bottom_sheet/bottom_sheet_service.dart'
    as _i8;
import 'package:stacked_services/src/dialog/dialog_service.dart' as _i10;
import 'package:stacked_services/src/models/overlay_request.dart' as _i11;
import 'package:stacked_services/src/models/overlay_response.dart' as _i9;
import 'package:stacked_services/src/navigation/router_service.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRootStackRouter_0 extends _i1.SmartFake
    implements _i2.RootStackRouter {
  _FakeRootStackRouter_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRouteData_1 extends _i1.SmartFake implements _i2.RouteData {
  _FakeRouteData_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRoutingController_2 extends _i1.SmartFake
    implements _i2.RoutingController {
  _FakeRoutingController_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBox_3<E> extends _i1.SmartFake implements _i3.Box<E> {
  _FakeBox_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocale_4 extends _i1.SmartFake implements _i4.Locale {
  _FakeLocale_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeThemeData_5 extends _i1.SmartFake implements _i5.ThemeData {
  _FakeThemeData_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i5.DiagnosticLevel? minLevel = _i5.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [RouterService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRouterService extends _i1.Mock implements _i6.RouterService {
  @override
  _i2.RootStackRouter get router => (super.noSuchMethod(
        Invocation.getter(#router),
        returnValue: _FakeRootStackRouter_0(
          this,
          Invocation.getter(#router),
        ),
        returnValueForMissingStub: _FakeRootStackRouter_0(
          this,
          Invocation.getter(#router),
        ),
      ) as _i2.RootStackRouter);
  @override
  set router(_i2.RootStackRouter? _router) => super.noSuchMethod(
        Invocation.setter(
          #router,
          _router,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i2.StackedPage<dynamic>> get stack => (super.noSuchMethod(
        Invocation.getter(#stack),
        returnValue: <_i2.StackedPage<dynamic>>[],
        returnValueForMissingStub: <_i2.StackedPage<dynamic>>[],
      ) as List<_i2.StackedPage<dynamic>>);
  @override
  _i2.RouteData get topRoute => (super.noSuchMethod(
        Invocation.getter(#topRoute),
        returnValue: _FakeRouteData_1(
          this,
          Invocation.getter(#topRoute),
        ),
        returnValueForMissingStub: _FakeRouteData_1(
          this,
          Invocation.getter(#topRoute),
        ),
      ) as _i2.RouteData);
  @override
  dynamic setRouter(_i2.RootStackRouter? router) => super.noSuchMethod(
        Invocation.method(
          #setRouter,
          [router],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<dynamic> navigateTo(
    _i2.PageRouteInfo<dynamic>? route, {
    _i2.OnNavigationFailure? onFailure,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateTo,
          [route],
          {#onFailure: onFailure},
        ),
        returnValue: _i7.Future<dynamic>.value(),
        returnValueForMissingStub: _i7.Future<dynamic>.value(),
      ) as _i7.Future<dynamic>);
  @override
  _i7.Future<void> navigateToPath({
    required String? path,
    bool? includePrefixMatches = false,
    _i2.OnNavigationFailure? onFailure,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateToPath,
          [],
          {
            #path: path,
            #includePrefixMatches: includePrefixMatches,
            #onFailure: onFailure,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<T?> navigateWithTransition<T extends Object?>(
    _i5.Widget? widget, {
    _i5.RouteTransitionsBuilder? transitionBuilder,
    bool? fullscreenDialog = false,
    Duration? transitionDuration = const Duration(milliseconds: 300),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateWithTransition,
          [widget],
          {
            #transitionBuilder: transitionBuilder,
            #fullscreenDialog: fullscreenDialog,
            #transitionDuration: transitionDuration,
          },
        ),
        returnValue: _i7.Future<T?>.value(),
        returnValueForMissingStub: _i7.Future<T?>.value(),
      ) as _i7.Future<T?>);
  @override
  _i7.Future<T?> replaceWith<T extends Object?>(
    _i2.PageRouteInfo<dynamic>? route, {
    _i2.OnNavigationFailure? onFailure,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWith,
          [route],
          {#onFailure: onFailure},
        ),
        returnValue: _i7.Future<T?>.value(),
        returnValueForMissingStub: _i7.Future<T?>.value(),
      ) as _i7.Future<T?>);
  @override
  _i7.Future<void> clearStackAndShow(
    _i2.PageRouteInfo<dynamic>? route, {
    _i2.OnNavigationFailure? onFailure,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShow,
          [route],
          {#onFailure: onFailure},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<void> clearStackAndShowView(
    _i5.Widget? widget, {
    _i5.RouteTransitionsBuilder? transitionBuilder,
    bool? fullscreenDialog = false,
    Duration? transitionDuration = const Duration(milliseconds: 300),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShowView,
          [widget],
          {
            #transitionBuilder: transitionBuilder,
            #fullscreenDialog: fullscreenDialog,
            #transitionDuration: transitionDuration,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  void popForced<T extends Object?>([T? result]) => super.noSuchMethod(
        Invocation.method(
          #popForced,
          [result],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<bool> pop<T extends Object?>([T? result]) => (super.noSuchMethod(
        Invocation.method(
          #pop,
          [result],
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
  @override
  void back<T extends Object?>({T? result}) => super.noSuchMethod(
        Invocation.method(
          #back,
          [],
          {#result: result},
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.RoutingController topMostRouter({bool? ignorePagelessRoutes = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #topMostRouter,
          [],
          {#ignorePagelessRoutes: ignorePagelessRoutes},
        ),
        returnValue: _FakeRoutingController_2(
          this,
          Invocation.method(
            #topMostRouter,
            [],
            {#ignorePagelessRoutes: ignorePagelessRoutes},
          ),
        ),
        returnValueForMissingStub: _FakeRoutingController_2(
          this,
          Invocation.method(
            #topMostRouter,
            [],
            {#ignorePagelessRoutes: ignorePagelessRoutes},
          ),
        ),
      ) as _i2.RoutingController);
  @override
  _i7.Future<T?> pushNativeRoute<T extends Object?>(_i5.Route<T>? route) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushNativeRoute,
          [route],
        ),
        returnValue: _i7.Future<T?>.value(),
        returnValueForMissingStub: _i7.Future<T?>.value(),
      ) as _i7.Future<T?>);
}

/// A class which mocks [BottomSheetService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBottomSheetService extends _i1.Mock
    implements _i8.BottomSheetService {
  @override
  void setCustomSheetBuilders(Map<dynamic, _i8.SheetBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #setCustomSheetBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<_i9.SheetResponse<dynamic>?> showBottomSheet({
    required String? title,
    String? description,
    String? confirmButtonTitle = r'Ok',
    String? cancelButtonTitle,
    bool? enableDrag = true,
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showBottomSheet,
          [],
          {
            #title: title,
            #description: description,
            #confirmButtonTitle: confirmButtonTitle,
            #cancelButtonTitle: cancelButtonTitle,
            #enableDrag: enableDrag,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
          },
        ),
        returnValue: _i7.Future<_i9.SheetResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i7.Future<_i9.SheetResponse<dynamic>?>.value(),
      ) as _i7.Future<_i9.SheetResponse<dynamic>?>);
  @override
  _i7.Future<_i9.SheetResponse<T>?> showCustomSheet<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i4.Color? barrierColor = const _i4.Color(2315255808),
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    String? barrierLabel = r'',
    dynamic customData,
    R? data,
    bool? enableDrag = true,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomSheet,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #barrierLabel: barrierLabel,
            #customData: customData,
            #data: data,
            #enableDrag: enableDrag,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
          },
        ),
        returnValue: _i7.Future<_i9.SheetResponse<T>?>.value(),
        returnValueForMissingStub: _i7.Future<_i9.SheetResponse<T>?>.value(),
      ) as _i7.Future<_i9.SheetResponse<T>?>);
  @override
  void completeSheet(_i9.SheetResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeSheet,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DialogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDialogService extends _i1.Mock implements _i10.DialogService {
  @override
  void registerCustomDialogBuilders(
          Map<dynamic, _i10.DialogBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void registerCustomDialogBuilder({
    required dynamic variant,
    required _i5.Widget Function(
      _i5.BuildContext,
      _i11.DialogRequest<dynamic>,
      dynamic Function(_i9.DialogResponse<dynamic>),
    )? builder,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilder,
          [],
          {
            #variant: variant,
            #builder: builder,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<_i9.DialogResponse<dynamic>?> showDialog({
    String? title,
    String? description,
    String? cancelTitle,
    _i4.Color? cancelTitleColor,
    String? buttonTitle = r'Ok',
    _i4.Color? buttonTitleColor,
    bool? barrierDismissible = false,
    _i10.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #buttonTitle: buttonTitle,
            #buttonTitleColor: buttonTitleColor,
            #barrierDismissible: barrierDismissible,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i7.Future<_i9.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i7.Future<_i9.DialogResponse<dynamic>?>.value(),
      ) as _i7.Future<_i9.DialogResponse<dynamic>?>);
  @override
  _i7.Future<_i9.DialogResponse<T>?> showCustomDialog<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i4.Color? barrierColor = const _i4.Color(2315255808),
    bool? barrierDismissible = false,
    String? barrierLabel = r'',
    bool? useSafeArea = true,
    dynamic customData,
    R? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomDialog,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #barrierDismissible: barrierDismissible,
            #barrierLabel: barrierLabel,
            #useSafeArea: useSafeArea,
            #customData: customData,
            #data: data,
          },
        ),
        returnValue: _i7.Future<_i9.DialogResponse<T>?>.value(),
        returnValueForMissingStub: _i7.Future<_i9.DialogResponse<T>?>.value(),
      ) as _i7.Future<_i9.DialogResponse<T>?>);
  @override
  _i7.Future<_i9.DialogResponse<dynamic>?> showConfirmationDialog({
    String? title,
    String? description,
    String? cancelTitle = r'Cancel',
    _i4.Color? cancelTitleColor,
    String? confirmationTitle = r'Ok',
    _i4.Color? confirmationTitleColor,
    bool? barrierDismissible = false,
    _i10.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showConfirmationDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #confirmationTitle: confirmationTitle,
            #confirmationTitleColor: confirmationTitleColor,
            #barrierDismissible: barrierDismissible,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i7.Future<_i9.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i7.Future<_i9.DialogResponse<dynamic>?>.value(),
      ) as _i7.Future<_i9.DialogResponse<dynamic>?>);
  @override
  void completeDialog(_i9.DialogResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeDialog,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AppPreferencesService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppPreferencesService extends _i1.Mock
    implements _i12.AppPreferencesService {
  @override
  List<int> get key => (super.noSuchMethod(
        Invocation.getter(#key),
        returnValue: <int>[],
        returnValueForMissingStub: <int>[],
      ) as List<int>);
  @override
  set key(List<int>? _key) => super.noSuchMethod(
        Invocation.setter(
          #key,
          _key,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Box<dynamic> get appHelperBox => (super.noSuchMethod(
        Invocation.getter(#appHelperBox),
        returnValue: _FakeBox_3<dynamic>(
          this,
          Invocation.getter(#appHelperBox),
        ),
        returnValueForMissingStub: _FakeBox_3<dynamic>(
          this,
          Invocation.getter(#appHelperBox),
        ),
      ) as _i3.Box<dynamic>);
  @override
  set appHelperBox(_i3.Box<dynamic>? _appHelperBox) => super.noSuchMethod(
        Invocation.setter(
          #appHelperBox,
          _appHelperBox,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Locale getAppLanguageLocale() => (super.noSuchMethod(
        Invocation.method(
          #getAppLanguageLocale,
          [],
        ),
        returnValue: _FakeLocale_4(
          this,
          Invocation.method(
            #getAppLanguageLocale,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeLocale_4(
          this,
          Invocation.method(
            #getAppLanguageLocale,
            [],
          ),
        ),
      ) as _i4.Locale);
  @override
  void setAppLanguageLocale({required _i4.Locale? locale}) =>
      super.noSuchMethod(
        Invocation.method(
          #setAppLanguageLocale,
          [],
          {#locale: locale},
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [AppThemeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppThemeService extends _i1.Mock implements _i13.AppThemeService {
  @override
  int get colorSelected => (super.noSuchMethod(
        Invocation.getter(#colorSelected),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  _i5.ThemeData get themeData => (super.noSuchMethod(
        Invocation.getter(#themeData),
        returnValue: _FakeThemeData_5(
          this,
          Invocation.getter(#themeData),
        ),
        returnValueForMissingStub: _FakeThemeData_5(
          this,
          Invocation.getter(#themeData),
        ),
      ) as _i5.ThemeData);
  @override
  _i4.Locale get appLocale => (super.noSuchMethod(
        Invocation.getter(#appLocale),
        returnValue: _FakeLocale_4(
          this,
          Invocation.getter(#appLocale),
        ),
        returnValueForMissingStub: _FakeLocale_4(
          this,
          Invocation.getter(#appLocale),
        ),
      ) as _i4.Locale);
  @override
  List<_i13.ThemeColorOptions> get colorOptions => (super.noSuchMethod(
        Invocation.getter(#colorOptions),
        returnValue: <_i13.ThemeColorOptions>[],
        returnValueForMissingStub: <_i13.ThemeColorOptions>[],
      ) as List<_i13.ThemeColorOptions>);
  @override
  int get listenersCount => (super.noSuchMethod(
        Invocation.getter(#listenersCount),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  _i5.ThemeData updateThemes(
    int? colorIndex,
    bool? useMaterial3,
    bool? useLightMode,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateThemes,
          [
            colorIndex,
            useMaterial3,
            useLightMode,
          ],
        ),
        returnValue: _FakeThemeData_5(
          this,
          Invocation.method(
            #updateThemes,
            [
              colorIndex,
              useMaterial3,
              useLightMode,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeThemeData_5(
          this,
          Invocation.method(
            #updateThemes,
            [
              colorIndex,
              useMaterial3,
              useLightMode,
            ],
          ),
        ),
      ) as _i5.ThemeData);
  @override
  void handleBrightnessChange() => super.noSuchMethod(
        Invocation.method(
          #handleBrightnessChange,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void handleColorSelect(int? value) => super.noSuchMethod(
        Invocation.method(
          #handleColorSelect,
          [value],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void handleDarkModeSelect(bool? value) => super.noSuchMethod(
        Invocation.method(
          #handleDarkModeSelect,
          [value],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void handleMaterial3Select(bool? value) => super.noSuchMethod(
        Invocation.method(
          #handleMaterial3Select,
          [value],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Locale getLocaleFromPref() => (super.noSuchMethod(
        Invocation.method(
          #getLocaleFromPref,
          [],
        ),
        returnValue: _FakeLocale_4(
          this,
          Invocation.method(
            #getLocaleFromPref,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeLocale_4(
          this,
          Invocation.method(
            #getLocaleFromPref,
            [],
          ),
        ),
      ) as _i4.Locale);
  @override
  void changeAppLocale({required _i4.Locale? appLocale}) => super.noSuchMethod(
        Invocation.method(
          #changeAppLocale,
          [],
          {#appLocale: appLocale},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
        Invocation.method(
          #listenToReactiveValues,
          [reactiveValues],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
